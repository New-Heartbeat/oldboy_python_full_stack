"""
1、什么是模块
    模块就是一系列功能的集合体，分为三大类
        Ⅰ：内置的模块
        Ⅱ：第三方模块
        Ⅲ：自定义的模块
            一个python文件本身就是一个模块，模块名.py

            ps：模块分为四种形式
                1 使用python编写的.py文件
                2 已被编译为共享库或DLL的C或C++扩展
                3 把一系列模块组织到一起的文件夹（注：文件夹下有一个__init__.py文件，该文件夹称之为包）
                4 使用C编写并链接到python解释器的内置模块

2、为何要用模块
    自己版本.py.内置与第三方模块拿来就用，无需定义，可以极大地提升自己的开发效率
    b.自定义模块
        可以将程序的各部分功能提取出来放到一模块中来为大家共享使用
        好处是减少了代码冗余，程序组织结构更加清晰

3、如何用模块
"""
# import time
# print(time)

# import foo
# 首次导入模块会发生
# 1、执行foo.py
# 2、产生foo.py的名称空间，将foo.py运行过程中产生的名字都丢到foo的名称空间中
# 3、在当前文件中产生的有一个名字foo，该名字指向2中产生的名称空间
# 之后的导入，都是直接引用首次导入产生的foo.py名称空间
# import foo

# 引用
# 强调1：模块.名 指名道姓地向某一个模块要名字对应的值，不会与当前名称空间中的名字发生冲突
# x = 11111
# print(foo.x)
# print(x)

# 强调2：无论是查看还是修改，操作的都是模块，与调用位置无关
# import foo
#
# x = 33333
# foo.get()
#
# foo.change()
# print(x)
# print(foo.x)
# foo.get()

# 可以以逗号为分隔符在一行导入多个模块，但是不建议这样做
# import time, os, sys

# 导入模块的规范
# 1.python内置模块
# 2.第三方模块
# 3.程序员自定义模块
# import time
# import numpy as np
# import foo

# 起别名
# import pandas as pd

# 模块是第一类对象
# import foo
# f = foo
# f.get()

# 自定义模块的命名应该采用纯小写+下划线的风格
